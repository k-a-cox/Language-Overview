#platform "Gen4-uLCD-43DCT-CLB"


// Program Skeleton 1.3 generated 12/4/2019 6:30:51 PM

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

#inherit "Data_on_ScopeConst.inc"

#constant GridColor             LIME
#constant len 418
var old_y1[len];
var new_y1[len];

func Trace_f()

    // draw and update scope
    Graticule(45, 0, 462, 248, 10,  10, 0x0280) ;
    gfx_Hline(0 + 125, 45, 462, YELLOW) ;
    gfx_Scope(45, 418, 248-123, 418, 0, (12000/max), BLACK,
              old_y1, new_y1, LIME, 0,0,0, 0,0,0, 0,0,0 ) ;

endfunc

func main()
//  var hstrings ; // Handle to access uSD strings, uncomment if required
//  var hFontx ;   // Handle to access uSD fonts, uncomment if required and change n to font number
//  Uncomment the following if uSD images, fonts or strings used.

    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    else
         gfx_Cls();
    endif
//    gfx_TransparentColour(0x0020);    // uncomment if transparency required
//    gfx_Transparency(ON);             // uncomment if transparency required

//  hFontn := file_LoadImageControl("Data_on_.dan", "Data_on_.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
//  hstrings := file_Open("Data_on_.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
    hndl := file_LoadImageControl("Data_on_.dat", "Data_on_.gci", 1);
    gfx_Set(SCREEN_MODE,LANDSCAPE_R) ;

    img_Show(hndl,iForm1) ;

    // Create empty initial scope
    gfx_RectangleFilled(45, 0, 462, 248, BLACK) ;
    gfx_Hline(0 + 125, 45, 462, YELLOW) ;
    Graticule(45, 0, 462, 248, 10,  10, 0x0280) ;

    //Declare scale
    //putstrXY(200,242,"                                                                     "); gfx_MoveTo(200,242); print("100% is ",max," mm");

    com_Init(serialBuff, 500, 0);
    var temp,NaN := 0, init := 0;
    repeat
        if(com_Count()>0)
            temp := serin();
            if(init == 0)
                if(temp == '\n')
                    init := 1;
                    to(strBuff); putstr(" ");
                else
                    init := 0;
                endif
            else if(temp == '\n')
                    to(APPEND); putstr("");
                    if (NaN == 0)
                        decodeStr();
                    else if (NaN == 1)
                        putstrXY(12,242,"                                                                     ");      putstrXY(12,242,strBuff);
                    endif
                to(strBuff); putstr(" ");
                NaN := 0;
            else if(isdigit(temp) && NaN == 0)
                to(APPEND); putch(temp);
            else if((NaN ==0)&& (temp == ' ' || temp == '\r'))

            else if(temp == '-' && NaN == 0)
                to(APPEND); putch(temp);
            else
                NaN := 1;
                to(APPEND);putch(temp);
            endif
        endif
    forever


endfunc

var strBuff[50],serialBuff[500];

func decodeStr()
    var private init := 0;
    var p,temp;
    p := str_Ptr(strBuff);
    if(!init)
        str_GetW(&p,&temp);
        init := 1;
    endif

    str_GetW(&p,&temp);
    updateBounds(temp);

    var k;
    for(k := 0;k <len-1;k++)
        new_y1[k] := new_y1[k+1];
    next
    new_y1[len-1] := temp;
    Trace_f();


endfunc

var max := 60;

func updateBounds(var new)
    if(ABS(new) > max)
        max := ABS(new);
        //putstrXY(200,242,"                                                                     "); gfx_MoveTo(200,242); print("100% is ",max," mm");
    endif
endfunc


func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
    var y ;
    x1 += xinc ;
    while (x1 < x2)
        y := y1 + yinc ;
        while (y < y2)
            gfx_PutPixel(x1, y, color) ;
            y += yinc ;
        wend
        x1 += xinc ;
    wend
endfunc


